import random
import json
import os

def gcd(a, b):
    while b != 0:
        a, b = b, a % b
    return a

def extended_gcd(a, b):
    if a == 0:
        return (b, 0, 1)
    else:
        g, y, x = extended_gcd(b % a, a)
        return (g, x - (b // a) * y, y)

def mod_inverse(a, m):
    g, x, y = extended_gcd(a, m)
    if g != 1:
        raise Exception('Modular inverse does not exist')
    else:
        return x % m

def generate_keypair(p, q):
    n = p * q
    phi = (p - 1) * (q - 1)

    e = random.randrange(1, phi)
    g = gcd(e, phi)
    while g != 1:
        e = random.randrange(1, phi)
        g = gcd(e, phi)

    d = mod_inverse(e, phi)

    return ((n, e), d)

def encrypt(public_key, plaintext):
    n, e = public_key
    cipher = [pow(ord(char), e, n) for char in plaintext]
    return cipher

def decrypt(private_key, ciphertext):
    n, d = private_key
    plain = [pow(char, d, n) for char in ciphertext]
    return ''.join([chr(i) for i in plain])  # Convert ASCII back to characters

def factorize(n):
    factors = []
    # This is a naive approach and not efficient for large numbers.
    for i in range(2, n):
        while n % i == 0:
            factors.append(i)
            n //= i
    if n > 1:
        factors.append(n)
    return factors

# Function to check if a number is prime
def is_prime(num):
    if num <= 1:
        return False
    elif num == 2:
        return True
    elif num % 2 == 0:
        return False
    else:
        for i in range(3, int(num ** 0.5) + 1, 2):
            if num % i == 0:
                return False
        return True

def decrypt_with_factorization(private_key, ciphertext):
    n, _ = private_key
    factors = factorize(n)  # Factorize the modulus n into prime factors
    phi_n = (factors[0] - 1) * (factors[1] - 1)  # Compute Euler's totient function Ï†(n)
    d = mod_inverse(private_key[1], phi_n)  # Compute the private key exponent d
    plain = [pow(char, d, n) for char in ciphertext]
    return ''.join([chr(i) for i in plain])  # Convert ASCII back to characters

def menu():
    print("Choose an option:")
    print("1. Encrypt text")
    print("2. Decrypt from file")
    choice = input("Enter your choice: ")
    return choice

# User input for text
choice = menu()

if choice == "1":
    text = input("Enter the text you want to encrypt: ")
    # User input for prime numbers
    p = int(input("Enter the first prime number: "))
    q = int(input("Enter the second prime number: "))

    # Check if both numbers are prime
    if not (is_prime(p) and is_prime(q)):
        print("Both numbers must be prime.")
        exit()

    # Generate public and private keys
    public_key, private_key = generate_keypair(p, q)

    # Encrypt the plaintext using the public key
    encrypted_text = encrypt(public_key, text)
    print("Encrypted Text:", encrypted_text)

    # Save ciphertext and public key to a file
    data = {
        "ciphertext": encrypted_text,
        "public_key": public_key
    }

    filename = "rsa_data.json"  # File name to save the data

    with open(filename, "w") as file:
        json.dump(data, file)

    print("Ciphertext and public key (n, e) saved in", filename)

elif choice == "2":
# Ask user for the file to decrypt
  decrypt_filename = input("Enter the filename to decrypt: ")

  # Check if file exists
  if os.path.exists(decrypt_filename):
      # Read ciphertext and public key from the file
      with open(decrypt_filename, "r") as file:
          data = json.load(file)
          ciphertext_y = data["ciphertext"]
          public_key = data["public_key"]
  
      # Decrypt ciphertext using the factorization method
      decrypted_text = decrypt_with_factorization(public_key, ciphertext_y)
      print("Decrypted Text:", decrypted_text)
  else:
      print("File does not exist.")

else:
    print("Invalid choice.")
