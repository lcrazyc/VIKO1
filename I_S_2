using System;
using System.IO;
using System.Security.Cryptography;
using System.Text;

namespace AESEncryptor
{
    public enum EncryptionModes
    {
        CFB,
        CBC,
        ECB
    }

    public class AESFileEncryptor
    {
        private static readonly string filePath = "encrypted_text.txt";

        public static void Main()
        {
            Console.WriteLine("AES Encryption/Decryption Application");

            Console.WriteLine("\nChoose operation: (1) Encrypt, (2) Decrypt");
            string operationInput = Console.ReadLine();

            if (operationInput == "1")
            {
                EncryptAndSaveToFile();
            }
            else if (operationInput == "2")
            {
                DecryptFromFile();
            }
            else
            {
                Console.WriteLine("Invalid operation. Exiting.");
            }
        }

        public static void EncryptAndSaveToFile()
        {
            Console.WriteLine("\nEnter the plaintext message:");
            string plaintext = Console.ReadLine();

            Console.WriteLine("Enter the secret key (maximum length 32 bytes):");
            string key = Console.ReadLine();

            if (!IsValidKey(key))
            {
                Console.WriteLine("Invalid key size. Exiting.");
                return;
            }

            Console.WriteLine("Choose encryption mode (ECB, CBC, CFB):");
            string modeInput = Console.ReadLine();
            if (!Enum.TryParse(modeInput, out EncryptionModes encryptionMode))
            {
                Console.WriteLine("Invalid encryption mode. Exiting.");
                return;
            }

            string encryptedText;
            if (encryptionMode == EncryptionModes.CBC || encryptionMode == EncryptionModes.CFB)
            {
                Console.WriteLine("Enter the Initialization Vector (IV):");
                string iv = Console.ReadLine();

                if (string.IsNullOrEmpty(iv))
                {
                    Console.WriteLine("IV cannot be empty for CBC and CFB modes. Exiting.");
                    return;
                }

                encryptedText = Encrypt(plaintext, key, encryptionMode, iv);
            }
            else
            {
                encryptedText = Encrypt(plaintext, key, encryptionMode);
            }

            Console.WriteLine($"\nEncrypted Text: {encryptedText}");

            // Save encrypted text to file
            SaveToFile(encryptedText);
        }

        public static void DecryptFromFile()
        {
            Console.WriteLine("\nEnter the file path for decryption:");
            string filePathForDecryption = Console.ReadLine();

            if (File.Exists(filePathForDecryption))
            {
                // Read encrypted text from the selected file
                string encryptedFromFile = File.ReadAllText(filePathForDecryption);
                Console.WriteLine($"Encrypted Text from File: {encryptedFromFile}");

                Console.WriteLine("Enter the secret key used for encryption:");
                string key = Console.ReadLine();

                Console.WriteLine("Choose encryption mode used for encryption (ECB, CBC, CFB):");
                string modeInput = Console.ReadLine();
                if (!Enum.TryParse(modeInput, out EncryptionModes encryptionMode))
                {
                    Console.WriteLine("Invalid encryption mode. Exiting.");
                    return;
                }

                try
                {
                    // Decrypt text from file
                    string decryptedText;
                    if (encryptionMode == EncryptionModes.CBC || encryptionMode == EncryptionModes.CFB)
                    {
                        Console.WriteLine("Enter the Initialization Vector (IV) used during encryption:");
                        string iv = Console.ReadLine();

                        if (string.IsNullOrEmpty(iv))
                        {
                            Console.WriteLine("IV cannot be empty for CBC and CFB modes. Exiting.");
                            return;
                        }

                        decryptedText = Decrypt(encryptedFromFile, key, encryptionMode, iv);
                    }
                    else
                    {
                        decryptedText = Decrypt(encryptedFromFile, key, encryptionMode);
                    }

                    Console.WriteLine($"Decrypted Text: {decryptedText}");
                }
                catch (CryptographicException ex)
                {
                    Console.WriteLine($"Decryption failed: {ex.Message}");
                }
            }
            else
            {
                Console.WriteLine("File not found. Exiting.");
            }
        }

        public static string Encrypt(string plainText, string key, EncryptionModes encryptionMode, string iv = null)
        {
            byte[] keyBytes = Encoding.UTF8.GetBytes(key);

            // Ensure a valid key size
            if (!IsValidKey(key))
            {
                Console.WriteLine("Invalid key size. Exiting.");
                Environment.Exit(1);
            }

            byte[] plainBytes = Encoding.UTF8.GetBytes(plainText);

            using (Aes aes = Aes.Create())
            {
                aes.Key = keyBytes;
                aes.Mode = GetCipherMode(encryptionMode);
                aes.Padding = PaddingMode.PKCS7;

                if (encryptionMode == EncryptionModes.CBC || encryptionMode == EncryptionModes.CFB)
                {
                    if (string.IsNullOrEmpty(iv))
                    {
                        Console.WriteLine("IV cannot be empty for CBC and CFB modes. Exiting.");
                        Environment.Exit(1);
                    }

                    aes.IV = Encoding.UTF8.GetBytes(iv);
                }

                ICryptoTransform encryptor = aes.CreateEncryptor();
                byte[] encryptedBytes = encryptor.TransformFinalBlock(plainBytes, 0, plainBytes.Length);

                return Convert.ToBase64String(encryptedBytes);
            }
        }

        public static string Decrypt(string encryptedText, string key, EncryptionModes encryptionMode, string iv = null)
        {
            byte[] keyBytes = Encoding.UTF8.GetBytes(key);

            // Ensure a valid key size
            if (!IsValidKey(key))
            {
                Console.WriteLine("Invalid key size. Exiting.");
                Environment.Exit(1);
            }

            byte[] encryptedBytes = Convert.FromBase64String(encryptedText);

            using (Aes aes = Aes.Create())
            {
                aes.Key = keyBytes;
                aes.Mode = GetCipherMode(encryptionMode);
                aes.Padding = PaddingMode.None; // Set PaddingMode to None for manual handling

                if (encryptionMode == EncryptionModes.CBC || encryptionMode == EncryptionModes.CFB)
                {
                    if (string.IsNullOrEmpty(iv))
                    {
                        Console.WriteLine("IV cannot be empty for CBC and CFB modes. Exiting.");
                        Environment.Exit(1);
                    }

                    aes.IV = Encoding.UTF8.GetBytes(iv);
                }

                // Use MemoryStream to handle padding manually
                using (MemoryStream msDecrypt = new MemoryStream(encryptedBytes))
                {
                    using (CryptoStream csDecrypt = new CryptoStream(msDecrypt, aes.CreateDecryptor(), CryptoStreamMode.Read))
                    {
                        byte[] decryptedBytes = new byte[encryptedBytes.Length];
                        int decryptedByteCount = csDecrypt.Read(decryptedBytes, 0, decryptedBytes.Length);

                        return Encoding.UTF8.GetString(decryptedBytes, 0, decryptedByteCount);
                    }
                }
            }
        }

        private static CipherMode GetCipherMode(EncryptionModes encryptionMode)
        {
            switch (encryptionMode)
            {
                case EncryptionModes.CFB:
                    return CipherMode.CFB;
                case EncryptionModes.CBC:
                    return CipherMode.CBC;
                case EncryptionModes.ECB:
                    return CipherMode.ECB;
                default:
                    throw new ArgumentException("Invalid encryption mode");
            }
        }

        private static bool IsValidKey(string key)
        {
            // AES supports key sizes of 128, 192, or 256 bits
            int keyLength = Encoding.UTF8.GetBytes(key).Length;
            return keyLength == 16 || keyLength == 24 || keyLength == 32;
        }

        private static void SaveToFile(string encryptedText)
        {
            File.WriteAllText(filePath, encryptedText);
            Console.WriteLine($"Encrypted text saved to {filePath}");
        }

        private static string ReadFromFile()
        {
            return File.ReadAllText(filePath);
        }
    }
}
