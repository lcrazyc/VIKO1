def vigenere_encrypt(plaintext, key):
  alp = [chr(i) for i in range(33, 127)]  # ASCII characters from ! to ~
  e_text = ""

  key_repeated = (key * (len(plaintext) // len(key))) + key[:len(plaintext) % len(key)]

  for char, key_char in zip(plaintext, key_repeated):
      if char.isalnum():  # Encrypt letters and digits only
          char_index = alp.index(char)
          key_index = alp.index(key_char)

          # Encrypt the letter/digit using Vigenere cipher formula
          e_index = (char_index + key_index) % len(alp)
          e_char = alp[e_index]

          e_text += e_char
      else:
          # Preserve non-alphanumeric characters
          e_text += char

  return e_text


def vigenere_decrypt(e_text, key):
  alp = [chr(i) for i in range(33, 127)]  # ASCII characters from ! to ~
  d_text = ""

  key_repeated = (key * (len(e_text) // len(key))) + key[:len(e_text) % len(key)]

  for char, key_char in zip(e_text, key_repeated):
      if char.isalnum():  # Decrypt letters and digits only
          char_index = alp.index(char)
          key_index = alp.index(key_char)

          # Decrypt the letter/digit using Vigenere cipher formula
          d_index = (char_index - key_index) % len(alp)
          d_char = alp[d_index]

          d_text += d_char
      else:
          # Preserve non-alphanumeric characters
          d_text += char

  return d_text


def main():
  initial_text = input("Enter the initial text: ").encode('utf-8').strip().decode('utf-8')
  key = input("Enter the key: ").strip()

  if not initial_text or not key:
      print("Please enter valid input.")
      return

  e_result = vigenere_encrypt(initial_text, key)
  d_result = vigenere_decrypt(e_result, key)

  print("\nOriginal Text:  ", initial_text)
  print("Encrypted Text: ", e_result)
  print("Decrypted Text: ", d_result)


if __name__ == "__main__":
  main()
